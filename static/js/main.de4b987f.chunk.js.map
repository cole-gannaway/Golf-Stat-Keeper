{"version":3,"sources":["utils/firebase-utils.ts","services/database-dao.ts","services/firebase-path-builder.ts","services/database-service.ts","components/EditRoundStatsContainer/EditRoundStatsContainer.tsx","components/EditRoundMetaDataPage/EditRoundMetaDataPage.tsx","components/EditRoundButton/EditRoundButton.tsx","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FirebaseUtils","obj","retVal","list","Object","values","keys","forEach","item","i","key","DatabaseDAO","database","db","this","refPath","ref","push","once","snapshot","foundSnapshot","toJSON","val","data","set","update","remove","FirebasePathBuilder","path","DatabaseService","dbDao","emptyRoundHoleStats","emptyHoleStats","holeId","strokes","fairway","gir","putts","penaltyStrokes","chips","sandStrokes","emptyRoundStats","roundId","courseName","playerName","date","Date","now","stats","rootPath","createPath","pushNewObject","roundKey","roundPath","appendPath","setObjectData","updateObjectData","holeKey","EditRoundStatsContainer","props","firstHoleStats","holeStatsArr","state","holeIndex","handleChangeStrokes","bind","handleChangeChips","handleChangePutts","handleChangeSandStrokes","handleChangeToggleGIR","handleChangePenaltyStrokes","handleClickPrevHole","handleClickNextHole","handleSaveHoleStats","roundNickname","TextField","label","type","value","disabled","onChange","Switch","checked","inputProps","Button","onClick","goBack","event","setState","parseInt","target","changeHole","newHoleIndex","selectedHoleStats","dbService","updateHoleStatsReal","Component","EditRoundMetaDataPage","roundStats","isEditHoles","handleChangeRoundId","handleChangePlayerName","handleChangeCourseName","handleSaveRoundMetaData","handleToggleEditRoundStats","handleViewMetaData","content","convertObjectToArray","goHome","updateRoundMetadata","EditRoundButton","handleClick","selectedRoundStatsId","config","FireBaseConfig","app","firebase","initializeApp","Main","handleNewRound","resetSelectedRoundId","handleClickEditRound","on","rounds","console","log","rows","map","round","TableRow","TableCell","toDateString","toString","Table","TableHead","TableBody","createNewRoundStats","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de4b987f.chunk.js","sourcesContent":["export default class FirebaseUtils {\n  public static convertObjectToArray(obj: any): any[] {\n    let retVal = [];\n    if (obj) {\n      const list: any[] = Object.values(obj);\n      const keys = Object.keys(obj);\n      list.forEach((item, i) => (item.key = keys[i]));\n      retVal = list;\n    }\n    return retVal;\n  }\n}\n","export default class DatabaseDAO {\n  private db: firebase.default.database.Database;\n\n  constructor(database: firebase.default.database.Database) {\n    this.db = database;\n  }\n  public async pushNewObject(refPath: string) {\n    const key = this.db.ref(refPath).push().key;\n    return key;\n  }\n\n  public async getObjectAsJson(refPath: string) {\n    const ref = this.db.ref(refPath);\n    const foundSnapshot = await ref.once('value', (snapshot) => {\n      return snapshot;\n    });\n    if (foundSnapshot) {\n      return foundSnapshot.toJSON();\n    } else {\n      return null;\n    }\n  }\n\n  public async doesObjectExist(refPath: string) {\n    const ref = this.db.ref(refPath);\n    const retVal = await ref.once('value', (snapshot) => {\n      return snapshot.val();\n    });\n    if (retVal) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public async setObjectData(refPath: string, data: any) {\n    await this.db.ref(refPath).set(data);\n  }\n\n  public async updateObjectData(refPath: string, data: any) {\n    await this.db.ref(refPath).update(data);\n  }\n  public async deleteObject(refPath: string) {\n    await this.db.ref(refPath).remove();\n  }\n}\n","export default class FirebasePathBuilder {\n  private path: string = '';\n\n  public rootPath() {\n    this.path = 'rounds';\n    return this;\n  }\n  public setPath(path: string) {\n    this.path = path;\n    return this;\n  }\n  public appendPath(path: string) {\n    this.path = this.path + '/' + path;\n    return this;\n  }\n  public createPath() {\n    return this.path;\n  }\n}\n","import IHoleStats from '../interfaces/IHoleStats';\nimport IRoundStats from '../interfaces/IRoundStats';\nimport DatabaseDAO from './database-dao';\nimport FirebasePathBuilder from './firebase-path-builder';\n\nexport default class DatabaseService {\n  private dbDao: DatabaseDAO;\n  constructor(database: firebase.default.database.Database) {\n    this.dbDao = new DatabaseDAO(database);\n  }\n\n  public async createNewRoundStats() {\n    const emptyRoundHoleStats = [];\n    for (let i = 0; i < 18; i++) {\n      const emptyHoleStats: IHoleStats = {\n        key: '',\n        holeId: i + 1,\n        strokes: 4,\n        fairway: 'CENTER',\n        gir: false,\n        putts: 2,\n        penaltyStrokes: 0,\n        chips: 0,\n        sandStrokes: 0,\n      };\n      emptyRoundHoleStats.push(emptyHoleStats);\n    }\n    const emptyRoundStats: IRoundStats = {\n      key: '',\n      roundId: 'Untitled',\n      courseName: '',\n      playerName: '',\n      date: Date.now(),\n      stats: emptyRoundHoleStats,\n    };\n\n    let retVal = null;\n    const rootPath = new FirebasePathBuilder().rootPath().createPath();\n    const roundKey = await this.dbDao.pushNewObject(rootPath);\n    if (roundKey) {\n      retVal = roundKey;\n      const roundPath = new FirebasePathBuilder()\n        .rootPath()\n        .appendPath(roundKey)\n        .createPath();\n      emptyRoundStats.key = roundKey;\n      this.dbDao.setObjectData(roundPath, emptyRoundStats);\n    }\n    return retVal;\n  }\n  public async updateRoundMetadata(\n    roundKey: string,\n    data: { courseName: string; roundId: string; playerName: string }\n  ) {\n    const roundPath = new FirebasePathBuilder()\n      .rootPath()\n      .appendPath(roundKey)\n      .createPath();\n    await this.dbDao.updateObjectData(roundPath, data);\n  }\n\n  public async updateHoleStatsReal(\n    roundKey: string,\n    holeKey: string,\n    data: {\n      strokes: number;\n      fairway: string;\n      gir: boolean;\n      putts: number;\n      penaltyStrokes: number;\n      chips: number;\n      sandStrokes: number;\n    }\n  ) {\n    const roundPath = new FirebasePathBuilder()\n      .rootPath()\n      .appendPath(roundKey)\n      .appendPath('stats')\n      .appendPath(holeKey)\n      .createPath();\n    await this.dbDao.updateObjectData(roundPath, data);\n  }\n}\n","\nimport { Button, Switch, TextField } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport IHoleStats from '../../interfaces/IHoleStats';\nimport DatabaseService from '../../services/database-service';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nclass EditRoundStatsContainer extends Component<{ dbService: DatabaseService, roundKey: string, roundNickname: string, holeStatsArr: IHoleStats[], goBack(): void }, { holeId: number, strokes: number, fairway: string, gir: boolean, putts: number, penaltyStrokes: number, chips: number, sandStrokes: number, holeKey: string, holeIndex: number }> {\n\n  constructor(props: any) {\n    super(props);\n\n    const firstHoleStats = this.props.holeStatsArr[0];\n\n    this.state = {\n      holeId: firstHoleStats.holeId,\n      strokes: firstHoleStats.strokes,\n      fairway: firstHoleStats.fairway,\n      gir: firstHoleStats.gir,\n      putts: firstHoleStats.putts,\n      penaltyStrokes: firstHoleStats.penaltyStrokes,\n      chips: firstHoleStats.chips,\n      sandStrokes: firstHoleStats.sandStrokes,\n      holeKey: firstHoleStats.key,\n      holeIndex: 0\n    }\n\n    // handlers\n    this.handleChangeStrokes = this.handleChangeStrokes.bind(this);\n    this.handleChangeChips = this.handleChangeChips.bind(this);\n    this.handleChangePutts = this.handleChangePutts.bind(this);\n    this.handleChangeSandStrokes = this.handleChangeSandStrokes.bind(this);\n    this.handleChangeToggleGIR = this.handleChangeToggleGIR.bind(this);\n    this.handleChangePenaltyStrokes = this.handleChangePenaltyStrokes.bind(this);\n    this.handleClickPrevHole = this.handleClickPrevHole.bind(this);\n    this.handleClickNextHole = this.handleClickNextHole.bind(this);\n    this.handleSaveHoleStats = this.handleSaveHoleStats.bind(this);\n\n  }\n\n\n  public render() {\n    return <div>\n      <div>{this.props.roundNickname}</div>\n      <div><TextField label=\"Hole\" type='number' value={this.state.holeId} disabled={true}></TextField></div>\n      <div><TextField label=\"Strokes\" type='number' value={this.state.strokes} onChange={this.handleChangeStrokes}></TextField></div>\n      <div>GIR <Switch checked={this.state.gir} onChange={this.handleChangeToggleGIR} inputProps={{ 'aria-label': 'secondary checkbox' }} /></div>\n      <div><TextField label=\"Putts\" type='number' value={this.state.putts} onChange={this.handleChangePutts}></TextField></div>\n      <div><TextField label=\"Penalty Strokes\" type='number' value={this.state.penaltyStrokes} onChange={this.handleChangePenaltyStrokes}></TextField></div>\n      <div><TextField label=\"Sand Strokes\" type='number' value={this.state.sandStrokes} onChange={this.handleChangeSandStrokes}></TextField></div>\n      <div><TextField label=\"Chips\" type='number' value={this.state.chips} onChange={this.handleChangeChips}></TextField></div>\n      <div><Button onClick={this.handleSaveHoleStats}><SaveIcon></SaveIcon></Button></div>\n      <div><Button onClick={this.handleClickPrevHole} disabled={this.state.holeId === 1}>Prev</Button><Button onClick={this.handleClickNextHole} disabled={this.state.holeId === 18}>Next</Button></div>\n      <div><Button onClick={this.props.goBack}><ArrowBackIcon></ArrowBackIcon></Button></div>\n    </div >;\n  }\n\n  private handleChangeStrokes(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ strokes: parseInt(event.target.value) })\n  }\n  private handleChangePutts(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ putts: parseInt(event.target.value) })\n  }\n  private handleChangePenaltyStrokes(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ penaltyStrokes: parseInt(event.target.value) })\n  }\n  private handleChangeChips(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ chips: parseInt(event.target.value) })\n  }\n  private handleChangeSandStrokes(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ sandStrokes: parseInt(event.target.value) })\n  }\n  private handleChangeToggleGIR(event: React.ChangeEvent<HTMLInputElement>, checked: boolean) {\n    this.setState({ gir: checked })\n  }\n  private handleClickNextHole(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.changeHole(this.state.holeIndex + 1);\n  }\n  private handleClickPrevHole(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.changeHole(this.state.holeIndex - 1);\n  }\n  private changeHole(newHoleIndex: number) {\n    const selectedHoleStats = this.props.holeStatsArr[newHoleIndex];\n\n    this.setState({\n      holeId: selectedHoleStats.holeId,\n      strokes: selectedHoleStats.strokes,\n      fairway: selectedHoleStats.fairway,\n      gir: selectedHoleStats.gir,\n      putts: selectedHoleStats.putts,\n      penaltyStrokes: selectedHoleStats.penaltyStrokes,\n      chips: selectedHoleStats.chips,\n      sandStrokes: selectedHoleStats.sandStrokes,\n      holeKey: selectedHoleStats.key,\n      holeIndex: newHoleIndex\n    });\n  }\n\n  private async handleSaveHoleStats(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    await this.props.dbService.updateHoleStatsReal(this.props.roundKey, this.state.holeKey, {\n      strokes: this.state.strokes,\n      fairway: this.state.fairway,\n      gir: this.state.gir,\n      putts: this.state.putts,\n      penaltyStrokes: this.state.penaltyStrokes,\n      chips: this.state.chips,\n      sandStrokes: this.state.sandStrokes,\n    });\n  }\n}\n\nexport default EditRoundStatsContainer;\n","\nimport { Button, TextField } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport IRoundStats from '../../interfaces/IRoundStats';\nimport DatabaseService from '../../services/database-service';\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport SaveIcon from '@material-ui/icons/Save';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport EditRoundStatsPage from '../EditRoundStatsContainer/EditRoundStatsContainer';\nimport FirebaseUtils from '../../utils/firebase-utils';\nimport IHoleStats from '../../interfaces/IHoleStats';\n\nclass EditRoundMetaDataPage extends Component<{ dbService: DatabaseService, roundStats: IRoundStats, goHome: () => void }, { courseName: string, roundId: string, playerName: string, isEditHoles: boolean }> {\n\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      courseName: this.props.roundStats.courseName,\n      roundId: this.props.roundStats.roundId,\n      playerName: this.props.roundStats.playerName,\n      isEditHoles: false\n    }\n    // handlers\n    this.handleChangeRoundId = this.handleChangeRoundId.bind(this);\n    this.handleChangePlayerName = this.handleChangePlayerName.bind(this);\n    this.handleChangeCourseName = this.handleChangeCourseName.bind(this);\n    this.handleSaveRoundMetaData = this.handleSaveRoundMetaData.bind(this);\n    this.handleToggleEditRoundStats = this.handleToggleEditRoundStats.bind(this);\n    this.handleViewMetaData = this.handleViewMetaData.bind(this);\n  }\n\n\n  public render() {\n    let content = (<div></div>);\n    if (this.state.isEditHoles) {\n      const holeStatsArr: IHoleStats[] = FirebaseUtils.convertObjectToArray(this.props.roundStats.stats);\n      content = <EditRoundStatsPage dbService={this.props.dbService} roundKey={this.props.roundStats.key} roundNickname={this.props.roundStats.roundId} holeStatsArr={holeStatsArr} goBack={this.handleViewMetaData}></EditRoundStatsPage>\n    } else {\n      content = (<div>\n        <div><TextField label=\"Round Id\" value={this.state.roundId} onChange={this.handleChangeRoundId}></TextField></div>\n        <div><TextField label=\"Name\" value={this.state.playerName} onChange={this.handleChangePlayerName}></TextField></div>\n        <div><TextField label=\"Course\" value={this.state.courseName} onChange={this.handleChangeCourseName}></TextField></div>\n        <div>\n          <Button onClick={this.handleToggleEditRoundStats}><EditIcon></EditIcon></Button>\n          <Button onClick={this.handleSaveRoundMetaData}><SaveIcon></SaveIcon></Button>\n        </div>\n        <div><Button onClick={this.props.goHome}><ArrowBackIcon></ArrowBackIcon></Button></div>\n      </div >);\n    }\n    return content;\n  }\n  private handleChangeRoundId(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ roundId: event.target.value })\n  }\n  private handleChangePlayerName(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ playerName: event.target.value })\n  }\n  private handleChangeCourseName(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ courseName: event.target.value })\n  }\n\n  private async handleSaveRoundMetaData(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.props.dbService.updateRoundMetadata(this.props.roundStats.key, {\n      courseName: this.state.courseName,\n      roundId: this.state.roundId,\n      playerName: this.state.playerName\n    });\n  }\n  private handleToggleEditRoundStats(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.setState({ isEditHoles: !this.state.isEditHoles });\n  }\n  private handleViewMetaData() {\n    this.setState({ isEditHoles: false });\n  }\n}\n\nexport default EditRoundMetaDataPage;\n","import React, { Component } from 'react';\nimport { Button } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\n\nclass EditRoundButton extends Component<{ onClick(selectedRoundStatsId: string): void, selectedRoundStatsId: string }, {}> {\n  constructor(props: any) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  public render() {\n\n    return <div>\n      <Button onClick={this.handleClick}>\n        <EditIcon></EditIcon>\n      </Button>\n    </div>;\n  }\n  private handleClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.props.onClick(this.props.selectedRoundStatsId);\n  }\n\n}\n\nexport default EditRoundButton;\n","import { Button, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport IRoundStats from '../../interfaces/IRoundStats';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport firebase from 'firebase';\nimport FireBaseConfig from '../../config/firebase.config.json'\nimport FirebaseUtils from '../../utils/firebase-utils';\nimport DatabaseService from '../../services/database-service';\nimport EditRoundStatsPage from '../EditRoundMetaDataPage/EditRoundMetaDataPage';\n\nimport EditRoundButton from '../EditRoundButton/EditRoundButton';\nimport FirebasePathBuilder from '../../services/firebase-path-builder';\n\n// Configure Firebase.\nvar config = FireBaseConfig;\nvar app = firebase.initializeApp(config);\nvar db = firebase.database(app);\nconst dbService = new DatabaseService(db);\n\nclass Main extends Component<{}, { data: any, selectedRoundStatsId: string }> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: [],\n      selectedRoundStatsId: '',\n    }\n\n    // handlers\n    this.handleNewRound = this.handleNewRound.bind(this);\n    this.resetSelectedRoundId = this.resetSelectedRoundId.bind(this);\n    this.handleClickEditRound = this.handleClickEditRound.bind(this);\n  }\n  public componentDidMount() {\n    // listen to updates\n    const path = new FirebasePathBuilder().rootPath().createPath();\n    const roundStatsRef = db.ref(path);\n    roundStatsRef.on('value', (snapshot: any) => {\n      const data = snapshot.val();\n      this.setState({ data: data });\n    });\n\n  }\n\n  public render() {\n    // convert to arrays\n    const rounds: IRoundStats[] = FirebaseUtils.convertObjectToArray(this.state.data);\n\n    console.log('data');\n    console.log(rounds);\n\n    const rows = rounds.map((round, i) => {\n      return (<TableRow key={'row' + i.toString()}>\n        <TableCell>\n          <EditRoundButton selectedRoundStatsId={round.key} onClick={this.handleClickEditRound}></EditRoundButton>\n        </TableCell>\n        <TableCell>\n          {round.roundId}\n        </TableCell>\n        <TableCell>\n          {round.playerName}\n        </TableCell>\n        <TableCell>\n          {new Date(round.date).toDateString()}\n        </TableCell>\n      </TableRow>);\n    });\n\n    let content = (<div></div>);\n\n    const roundStats = this.state.data[this.state.selectedRoundStatsId];\n    if (this.state.selectedRoundStatsId !== '' && roundStats) {\n      content = (<EditRoundStatsPage dbService={dbService} roundStats={roundStats} goHome={this.resetSelectedRoundId} ></EditRoundStatsPage>);\n    } else {\n      content = (<div>\n        <Button onClick={this.handleNewRound}>New <AddIcon /></Button>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Select</TableCell>\n              <TableCell>Round</TableCell>\n              <TableCell>Player</TableCell>\n              <TableCell>Date</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows}\n          </TableBody>\n        </Table>\n      </div>)\n    }\n    return (<div>\n      {content}\n    </div>);\n  }\n\n\n  private async handleNewRound(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    const key = await dbService.createNewRoundStats();\n    if (key) {\n      this.setState({ selectedRoundStatsId: key });\n    }\n  }\n\n  private resetSelectedRoundId() {\n    this.setState({ selectedRoundStatsId: '' });\n  }\n\n  private handleClickEditRound(selectedRoundStatsId: string) {\n    this.setState({ selectedRoundStatsId: selectedRoundStatsId });\n  }\n}\n\nexport default Main;\n","import './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div id=\"AppContainer\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}