{"version":3,"sources":["utils/firebase-utils.ts","services/database-dao.ts","services/firebase-path-builder.ts","services/database-service.ts","components/FairwayInput/FairwayInput.tsx","components/EditRoundStatsContainer/EditRoundStatsContainer.tsx","components/EditRoundMetaDataPage/EditRoundMetaDataPage.tsx","components/EditRoundButton/EditRoundButton.tsx","components/Main/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FirebaseUtils","obj","retVal","list","Object","values","keys","forEach","item","i","key","DatabaseDAO","database","db","this","refPath","ref","push","once","snapshot","foundSnapshot","toJSON","val","data","set","update","remove","FirebasePathBuilder","path","DatabaseService","dbDao","emptyRoundHoleStats","emptyHoleStats","holeId","strokes","fairway","gir","putts","penaltyStrokes","chips","sandStrokes","emptyRoundStats","roundId","courseName","playerName","date","Date","now","stats","rootPath","createPath","pushNewObject","roundKey","roundPath","appendPath","setObjectData","updateObjectData","holeKey","FairwayInput","props","handleClick","bind","value","FormControl","component","FormLabel","RadioGroup","row","aria-label","name","defaultValue","FormControlLabel","control","Radio","color","label","labelPlacement","onClick","checked","event","onChange","target","Component","EditRoundStatsContainer","firstHoleStats","holeStatsArr","state","holeIndex","handleChangeStrokes","handleChangeChips","handleChangePutts","handleChangeFairway","handleChangeSandStrokes","handleChangeToggleGIR","handleChangePenaltyStrokes","handleClickPrevHole","handleClickNextHole","handleSaveHoleStats","roundNickname","TextField","type","disabled","Switch","inputProps","Button","goBack","setState","parseInt","changeHole","newFairway","newHoleIndex","selectedHoleStats","dbService","updateHoleStatsReal","EditRoundMetaDataPage","roundStats","isEditHoles","handleChangeRoundId","handleChangePlayerName","handleChangeCourseName","handleSaveRoundMetaData","handleToggleEditRoundStats","handleViewMetaData","content","convertObjectToArray","goHome","updateRoundMetadata","EditRoundButton","selectedRoundStatsId","config","FireBaseConfig","app","firebase","initializeApp","Main","handleNewRound","resetSelectedRoundId","handleClickEditRound","on","rows","map","round","TableRow","TableCell","toDateString","toString","Table","TableHead","TableBody","createNewRoundStats","App","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d08c6582.chunk.js","sourcesContent":["export default class FirebaseUtils {\n  public static convertObjectToArray(obj: any): any[] {\n    let retVal = [];\n    if (obj) {\n      const list: any[] = Object.values(obj);\n      const keys = Object.keys(obj);\n      list.forEach((item, i) => (item.key = keys[i]));\n      retVal = list;\n    }\n    return retVal;\n  }\n}\n","export default class DatabaseDAO {\n  private db: firebase.default.database.Database;\n\n  constructor(database: firebase.default.database.Database) {\n    this.db = database;\n  }\n  public async pushNewObject(refPath: string) {\n    const key = this.db.ref(refPath).push().key;\n    return key;\n  }\n\n  public async getObjectAsJson(refPath: string) {\n    const ref = this.db.ref(refPath);\n    const foundSnapshot = await ref.once('value', (snapshot) => {\n      return snapshot;\n    });\n    if (foundSnapshot) {\n      return foundSnapshot.toJSON();\n    } else {\n      return null;\n    }\n  }\n\n  public async doesObjectExist(refPath: string) {\n    const ref = this.db.ref(refPath);\n    const retVal = await ref.once('value', (snapshot) => {\n      return snapshot.val();\n    });\n    if (retVal) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public async setObjectData(refPath: string, data: any) {\n    await this.db.ref(refPath).set(data);\n  }\n\n  public async updateObjectData(refPath: string, data: any) {\n    await this.db.ref(refPath).update(data);\n  }\n  public async deleteObject(refPath: string) {\n    await this.db.ref(refPath).remove();\n  }\n}\n","export default class FirebasePathBuilder {\n  private path: string = '';\n\n  public rootPath() {\n    this.path = 'rounds';\n    return this;\n  }\n  public setPath(path: string) {\n    this.path = path;\n    return this;\n  }\n  public appendPath(path: string) {\n    this.path = this.path + '/' + path;\n    return this;\n  }\n  public createPath() {\n    return this.path;\n  }\n}\n","import IHoleStats from '../interfaces/IHoleStats';\nimport IRoundStats from '../interfaces/IRoundStats';\nimport DatabaseDAO from './database-dao';\nimport FirebasePathBuilder from './firebase-path-builder';\n\nexport default class DatabaseService {\n  private dbDao: DatabaseDAO;\n  constructor(database: firebase.default.database.Database) {\n    this.dbDao = new DatabaseDAO(database);\n  }\n\n  public async createNewRoundStats() {\n    const emptyRoundHoleStats = [];\n    for (let i = 0; i < 18; i++) {\n      const emptyHoleStats: IHoleStats = {\n        key: '',\n        holeId: i + 1,\n        strokes: 4,\n        fairway: 'CENTER',\n        gir: false,\n        putts: 2,\n        penaltyStrokes: 0,\n        chips: 0,\n        sandStrokes: 0,\n      };\n      emptyRoundHoleStats.push(emptyHoleStats);\n    }\n    const emptyRoundStats: IRoundStats = {\n      key: '',\n      roundId: 'Untitled',\n      courseName: '',\n      playerName: '',\n      date: Date.now(),\n      stats: emptyRoundHoleStats,\n    };\n\n    let retVal = null;\n    const rootPath = new FirebasePathBuilder().rootPath().createPath();\n    const roundKey = await this.dbDao.pushNewObject(rootPath);\n    if (roundKey) {\n      retVal = roundKey;\n      const roundPath = new FirebasePathBuilder()\n        .rootPath()\n        .appendPath(roundKey)\n        .createPath();\n      emptyRoundStats.key = roundKey;\n      this.dbDao.setObjectData(roundPath, emptyRoundStats);\n    }\n    return retVal;\n  }\n  public async updateRoundMetadata(\n    roundKey: string,\n    data: { courseName: string; roundId: string; playerName: string }\n  ) {\n    const roundPath = new FirebasePathBuilder()\n      .rootPath()\n      .appendPath(roundKey)\n      .createPath();\n    await this.dbDao.updateObjectData(roundPath, data);\n  }\n\n  public async updateHoleStatsReal(\n    roundKey: string,\n    holeKey: string,\n    data: {\n      strokes: number;\n      fairway: string;\n      gir: boolean;\n      putts: number;\n      penaltyStrokes: number;\n      chips: number;\n      sandStrokes: number;\n    }\n  ) {\n    const roundPath = new FirebasePathBuilder()\n      .rootPath()\n      .appendPath(roundKey)\n      .appendPath('stats')\n      .appendPath(holeKey)\n      .createPath();\n    await this.dbDao.updateObjectData(roundPath, data);\n  }\n}\n","import React, { Component } from 'react';\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nclass FairwayInput extends Component<{ onChange(newFairwayValue: string): void, value: string }, {}> {\n    constructor(props: any) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    public render() {\n        // TODO use the statement for is checked\n        switch (this.props.value) {\n            case 'LEFT':\n                break;\n            case 'CENTER':\n                break;\n            case 'RIGHT':\n                break;\n            default:\n                break;\n        }\n        return <div>\n            <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\">labelPlacement</FormLabel>\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\n                    <FormControlLabel\n                        value=\"LEFT\"\n                        control={<Radio color=\"primary\" />}\n                        label={<UndoIcon />}\n                        labelPlacement=\"top\"\n                        onClick={this.handleClick}\n                        checked={this.props.value === 'LEFT'}\n                    />\n                    <FormControlLabel\n                        value=\"CENTER\"\n                        control={<Radio color=\"primary\" />}\n                        label={<ArrowUpwardIcon />}\n                        labelPlacement=\"top\"\n                        onClick={this.handleClick}\n                        checked={this.props.value === 'CENTER'}\n                    />\n                    <FormControlLabel\n                        value=\"RIGHT\"\n                        control={<Radio color=\"primary\" />}\n                        label={<RedoIcon />}\n                        labelPlacement=\"top\"\n                        onClick={this.handleClick}\n                        checked={this.props.value === 'RIGHT'}\n                    />\n                </RadioGroup>\n            </FormControl>\n        </div>;\n    }\n\n    private handleClick(event: any) {\n        this.props.onChange(event.target.value);\n    }\n\n\n}\n\nexport default FairwayInput;\n","\nimport { Button, Switch, TextField } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport IHoleStats from '../../interfaces/IHoleStats';\nimport DatabaseService from '../../services/database-service';\nimport SaveIcon from '@material-ui/icons/Save';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n\nimport FairwayInput from '../FairwayInput/FairwayInput';\n\nclass EditRoundStatsContainer extends Component<{ dbService: DatabaseService, roundKey: string, roundNickname: string, holeStatsArr: IHoleStats[], goBack(): void }, { holeId: number, strokes: number, fairway: string, gir: boolean, putts: number, penaltyStrokes: number, chips: number, sandStrokes: number, holeKey: string, holeIndex: number }> {\n\n  constructor(props: any) {\n    super(props);\n\n    const firstHoleStats = this.props.holeStatsArr[0];\n\n    this.state = {\n      holeId: firstHoleStats.holeId,\n      strokes: firstHoleStats.strokes,\n      fairway: firstHoleStats.fairway,\n      gir: firstHoleStats.gir,\n      putts: firstHoleStats.putts,\n      penaltyStrokes: firstHoleStats.penaltyStrokes,\n      chips: firstHoleStats.chips,\n      sandStrokes: firstHoleStats.sandStrokes,\n      holeKey: firstHoleStats.key,\n      holeIndex: 0\n    }\n\n    // handlers\n    this.handleChangeStrokes = this.handleChangeStrokes.bind(this);\n    this.handleChangeChips = this.handleChangeChips.bind(this);\n    this.handleChangePutts = this.handleChangePutts.bind(this);\n    this.handleChangeFairway = this.handleChangeFairway.bind(this);\n    this.handleChangeSandStrokes = this.handleChangeSandStrokes.bind(this);\n    this.handleChangeToggleGIR = this.handleChangeToggleGIR.bind(this);\n    this.handleChangePenaltyStrokes = this.handleChangePenaltyStrokes.bind(this);\n    this.handleClickPrevHole = this.handleClickPrevHole.bind(this);\n    this.handleClickNextHole = this.handleClickNextHole.bind(this);\n    this.handleSaveHoleStats = this.handleSaveHoleStats.bind(this);\n\n  }\n\n\n  public render() {\n    return <div>\n      <div>{this.props.roundNickname}</div>\n      <div><TextField label=\"Hole\" type='number' value={this.state.holeId} disabled={true}></TextField></div>\n      <div><TextField label=\"Strokes\" type='number' value={this.state.strokes} onChange={this.handleChangeStrokes}></TextField></div>\n      <FairwayInput onChange={this.handleChangeFairway} value={this.state.fairway}></FairwayInput>\n      <div>GIR <Switch checked={this.state.gir} onChange={this.handleChangeToggleGIR} inputProps={{ 'aria-label': 'secondary checkbox' }} /></div>\n      <div><TextField label=\"Putts\" type='number' value={this.state.putts} onChange={this.handleChangePutts}></TextField></div>\n      <div><TextField label=\"Penalty Strokes\" type='number' value={this.state.penaltyStrokes} onChange={this.handleChangePenaltyStrokes}></TextField></div>\n      <div><TextField label=\"Sand Strokes\" type='number' value={this.state.sandStrokes} onChange={this.handleChangeSandStrokes}></TextField></div>\n      <div><TextField label=\"Chips\" type='number' value={this.state.chips} onChange={this.handleChangeChips}></TextField></div>\n      <div><Button onClick={this.handleSaveHoleStats}><SaveIcon></SaveIcon></Button></div>\n      <div><Button onClick={this.handleClickPrevHole} disabled={this.state.holeId === 1}>Prev</Button><Button onClick={this.handleClickNextHole} disabled={this.state.holeId === 18}>Next</Button></div>\n      <div><Button onClick={this.props.goBack}><ArrowBackIcon></ArrowBackIcon></Button></div>\n    </div >;\n  }\n\n  private handleChangeStrokes(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ strokes: parseInt(event.target.value) })\n  }\n  private handleChangePutts(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ putts: parseInt(event.target.value) })\n  }\n  private handleChangePenaltyStrokes(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ penaltyStrokes: parseInt(event.target.value) })\n  }\n  private handleChangeChips(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ chips: parseInt(event.target.value) })\n  }\n  private handleChangeSandStrokes(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ sandStrokes: parseInt(event.target.value) })\n  }\n  private handleChangeToggleGIR(event: React.ChangeEvent<HTMLInputElement>, checked: boolean) {\n    this.setState({ gir: checked })\n  }\n  private handleClickNextHole(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.changeHole(this.state.holeIndex + 1);\n  }\n  private handleClickPrevHole(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.changeHole(this.state.holeIndex - 1);\n  }\n  private handleChangeFairway(newFairway: string) {\n    this.setState({ fairway: newFairway })\n  }\n  private changeHole(newHoleIndex: number) {\n    const selectedHoleStats = this.props.holeStatsArr[newHoleIndex];\n\n    this.setState({\n      holeId: selectedHoleStats.holeId,\n      strokes: selectedHoleStats.strokes,\n      fairway: selectedHoleStats.fairway,\n      gir: selectedHoleStats.gir,\n      putts: selectedHoleStats.putts,\n      penaltyStrokes: selectedHoleStats.penaltyStrokes,\n      chips: selectedHoleStats.chips,\n      sandStrokes: selectedHoleStats.sandStrokes,\n      holeKey: selectedHoleStats.key,\n      holeIndex: newHoleIndex\n    });\n  }\n\n  private async handleSaveHoleStats(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    await this.props.dbService.updateHoleStatsReal(this.props.roundKey, this.state.holeKey, {\n      strokes: this.state.strokes,\n      fairway: this.state.fairway,\n      gir: this.state.gir,\n      putts: this.state.putts,\n      penaltyStrokes: this.state.penaltyStrokes,\n      chips: this.state.chips,\n      sandStrokes: this.state.sandStrokes,\n    });\n  }\n}\n\nexport default EditRoundStatsContainer;\n","\nimport { Button, TextField } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport IRoundStats from '../../interfaces/IRoundStats';\nimport DatabaseService from '../../services/database-service';\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport SaveIcon from '@material-ui/icons/Save';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport EditRoundStatsPage from '../EditRoundStatsContainer/EditRoundStatsContainer';\nimport FirebaseUtils from '../../utils/firebase-utils';\nimport IHoleStats from '../../interfaces/IHoleStats';\n\nclass EditRoundMetaDataPage extends Component<{ dbService: DatabaseService, roundStats: IRoundStats, goHome: () => void }, { courseName: string, roundId: string, playerName: string, isEditHoles: boolean }> {\n\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      courseName: this.props.roundStats.courseName,\n      roundId: this.props.roundStats.roundId,\n      playerName: this.props.roundStats.playerName,\n      isEditHoles: false\n    }\n    // handlers\n    this.handleChangeRoundId = this.handleChangeRoundId.bind(this);\n    this.handleChangePlayerName = this.handleChangePlayerName.bind(this);\n    this.handleChangeCourseName = this.handleChangeCourseName.bind(this);\n    this.handleSaveRoundMetaData = this.handleSaveRoundMetaData.bind(this);\n    this.handleToggleEditRoundStats = this.handleToggleEditRoundStats.bind(this);\n    this.handleViewMetaData = this.handleViewMetaData.bind(this);\n  }\n\n\n  public render() {\n    let content = (<div></div>);\n    if (this.state.isEditHoles) {\n      const holeStatsArr: IHoleStats[] = FirebaseUtils.convertObjectToArray(this.props.roundStats.stats);\n      content = <EditRoundStatsPage dbService={this.props.dbService} roundKey={this.props.roundStats.key} roundNickname={this.props.roundStats.roundId} holeStatsArr={holeStatsArr} goBack={this.handleViewMetaData}></EditRoundStatsPage>\n    } else {\n      content = (<div>\n        <div><TextField label=\"Round Id\" value={this.state.roundId} onChange={this.handleChangeRoundId}></TextField></div>\n        <div><TextField label=\"Name\" value={this.state.playerName} onChange={this.handleChangePlayerName}></TextField></div>\n        <div><TextField label=\"Course\" value={this.state.courseName} onChange={this.handleChangeCourseName}></TextField></div>\n        <div>\n          <Button onClick={this.handleToggleEditRoundStats}><EditIcon></EditIcon></Button>\n          <Button onClick={this.handleSaveRoundMetaData}><SaveIcon></SaveIcon></Button>\n        </div>\n        <div><Button onClick={this.props.goHome}><ArrowBackIcon></ArrowBackIcon></Button></div>\n      </div >);\n    }\n    return content;\n  }\n  private handleChangeRoundId(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ roundId: event.target.value })\n  }\n  private handleChangePlayerName(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ playerName: event.target.value })\n  }\n  private handleChangeCourseName(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) {\n    this.setState({ courseName: event.target.value })\n  }\n\n  private async handleSaveRoundMetaData(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.props.dbService.updateRoundMetadata(this.props.roundStats.key, {\n      courseName: this.state.courseName,\n      roundId: this.state.roundId,\n      playerName: this.state.playerName\n    });\n  }\n  private handleToggleEditRoundStats(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.setState({ isEditHoles: !this.state.isEditHoles });\n  }\n  private handleViewMetaData() {\n    this.setState({ isEditHoles: false });\n  }\n}\n\nexport default EditRoundMetaDataPage;\n","import React, { Component } from 'react';\nimport { Button } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\n\nclass EditRoundButton extends Component<{ onClick(selectedRoundStatsId: string): void, selectedRoundStatsId: string }, {}> {\n  constructor(props: any) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  public render() {\n\n    return <div>\n      <Button onClick={this.handleClick}>\n        <EditIcon></EditIcon>\n      </Button>\n    </div>;\n  }\n  private handleClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.props.onClick(this.props.selectedRoundStatsId);\n  }\n\n}\n\nexport default EditRoundButton;\n","import { Button, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport IRoundStats from '../../interfaces/IRoundStats';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport firebase from 'firebase';\nimport FireBaseConfig from '../../config/firebase.config.json'\nimport FirebaseUtils from '../../utils/firebase-utils';\nimport DatabaseService from '../../services/database-service';\nimport EditRoundStatsPage from '../EditRoundMetaDataPage/EditRoundMetaDataPage';\n\nimport EditRoundButton from '../EditRoundButton/EditRoundButton';\nimport FirebasePathBuilder from '../../services/firebase-path-builder';\n\n// Configure Firebase.\nvar config = FireBaseConfig;\nvar app = firebase.initializeApp(config);\nvar db = firebase.database(app);\nconst dbService = new DatabaseService(db);\n\nclass Main extends Component<{}, { data: any, selectedRoundStatsId: string }> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      data: [],\n      selectedRoundStatsId: '',\n    }\n\n    // handlers\n    this.handleNewRound = this.handleNewRound.bind(this);\n    this.resetSelectedRoundId = this.resetSelectedRoundId.bind(this);\n    this.handleClickEditRound = this.handleClickEditRound.bind(this);\n  }\n  public componentDidMount() {\n    // listen to updates\n    const path = new FirebasePathBuilder().rootPath().createPath();\n    const roundStatsRef = db.ref(path);\n    roundStatsRef.on('value', (snapshot: any) => {\n      const data = snapshot.val();\n      this.setState({ data: data });\n    });\n\n  }\n\n  public render() {\n    // convert to arrays\n    const rounds: IRoundStats[] = FirebaseUtils.convertObjectToArray(this.state.data);\n\n    const rows = rounds.map((round, i) => {\n      return (<TableRow key={'row' + i.toString()}>\n        <TableCell>\n          <EditRoundButton selectedRoundStatsId={round.key} onClick={this.handleClickEditRound}></EditRoundButton>\n        </TableCell>\n        <TableCell>\n          {round.roundId}\n        </TableCell>\n        <TableCell>\n          {round.playerName}\n        </TableCell>\n        <TableCell>\n          {new Date(round.date).toDateString()}\n        </TableCell>\n      </TableRow>);\n    });\n\n    let content = (<div></div>);\n\n    const roundStats = this.state.data[this.state.selectedRoundStatsId];\n    if (this.state.selectedRoundStatsId !== '' && roundStats) {\n      content = (<EditRoundStatsPage dbService={dbService} roundStats={roundStats} goHome={this.resetSelectedRoundId} ></EditRoundStatsPage>);\n    } else {\n      content = (<div>\n        <Button onClick={this.handleNewRound}>New <AddIcon /></Button>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Select</TableCell>\n              <TableCell>Round</TableCell>\n              <TableCell>Player</TableCell>\n              <TableCell>Date</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows}\n          </TableBody>\n        </Table>\n      </div>)\n    }\n    return (<div>\n      {content}\n    </div>);\n  }\n\n\n  private async handleNewRound(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    const key = await dbService.createNewRoundStats();\n    if (key) {\n      this.setState({ selectedRoundStatsId: key });\n    }\n  }\n\n  private resetSelectedRoundId() {\n    this.setState({ selectedRoundStatsId: '' });\n  }\n\n  private handleClickEditRound(selectedRoundStatsId: string) {\n    this.setState({ selectedRoundStatsId: selectedRoundStatsId });\n  }\n}\n\nexport default Main;\n","import './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div id=\"AppContainer\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}